# Aware Fit 개발 로그

## 목표: 통계 관리 기능 추가 (매출 통계 중심)

### 1단계: 기본 설정 및 사이드바 메뉴 추가 (완료)

#### 작업 목표
- 통계 관리 페이지의 기본적인 틀을 마련하고, 사이드바 메뉴 및 페이지 라우팅을 설정합니다.

#### 완료된 작업 내용

1.  **`src/pages/Statistics.tsx` 파일 생성:**
    *   통계 관리 페이지의 기본 React 컴포넌트를 생성했습니다.
    *   내용: `<h1>통계 관리</h1>`와 간단한 안내 문구 포함.

2.  **`src/components/Sidebar.tsx` 파일 수정:**
    *   사이드바 메뉴에 "통계 관리" 항목을 추가했습니다.
    *   `lucide-react` 라이브러리의 `BarChart` 아이콘을 "통계 관리" 메뉴에 연동했습니다.
    *   `getIcon` 함수에 "통계 관리" case를 추가하여 해당 아이콘을 반환하도록 수정했습니다.

3.  **`src/renderer/App.tsx` 파일 수정:**
    *   페이지 관리를 위한 `Page` enum에 `Statistics = '통계 관리'` 항목을 추가했습니다.
    *   `renderPage` 함수에 `Page.Statistics` case를 추가하여, "통계 관리" 메뉴 선택 시 `Statistics` 컴포넌트가 렌더링되도록 라우팅 로직을 설정했습니다.
    *   `Statistics` 컴포넌트를 상단에서 import 했습니다.

#### 기대 효과
- 사용자가 사이드바에서 "통계 관리" 메뉴를 클릭하면, 새로 생성된 통계 관리 페이지로 이동할 수 있게 되었습니다.
- 향후 통계 관련 기능을 개발할 수 있는 기본적인 페이지 구조가 마련되었습니다.

### 2단계: 매출 통계 기능 개발 (진행 중)
- **다음 단계 (From Step 1 Summary):** `Statistics.tsx` 페이지 내에 실제 매출 통계 데이터를 표시하기 위한 차트 라이브러리(`recharts`) 연동 및 UI 컴포넌트 개발을 진행합니다.
- **진행된 작업:**
    - **`src/pages/Statistics.tsx` 기본 구현:**
        - **상태 변수 정의:** 기간(`startDate`, `endDate`), 통계 단위(`viewType`), 데이터(`paymentsData`), 로딩(`isLoading`), 오류(`error`) 상태.
        - **목업 데이터 (`mockPayments`) 정의:** `PaymentData` 인터페이스 기반의 샘플 결제 데이터 생성.
        - **데이터 로딩 시뮬레이션:** `useEffect` 및 `setTimeout`을 이용한 초기 데이터 로딩 및 `refreshData` 함수 구현.
        - **데이터 가공 로직 (`processedData` - `useMemo` 사용):**
            - 선택된 기간 및 "완료" 상태 기준으로 결제 데이터 필터링.
            - `viewType`(일간/주간/월간)에 따라 매출액 및 결제 건수 집계.
        - **요약 정보 계산 로직 (`summary` - `useMemo` 사용):**
            - `processedData` 기반으로 총 매출액, 총 결제 건수, 건당 평균 매출액 계산.
        - **UI 컴포넌트 기본 골격 구현 (Tailwind CSS 사용):**
            - **컨트롤 패널:**
                - 기간 선택 (`input type="date"` 및 오늘/이번 주/이번 달/지난 달 빠른 선택 버튼).
                - 통계 단위 선택 (드롭다운: 일간, 주간, 월간).
                - 데이터 조회 버튼 (새로고침 기능).
            - **요약 카드:** 총 매출액, 총 결제 건수, 건당 평균 매출액 표시.
            - **매출 추이 차트 (`recharts` 사용):**
                - 일간/주간: `LineChart`, 월간: `BarChart` 사용.
                - X축(날짜/주차/월), Y축(매출액), 툴팁, 범례 기본 설정. 건수도 함께 표시.
                - 데이터 없을 시 메시지 표시.
            - **상세 데이터 테이블:** 집계된 기간별 매출액 및 건수 테이블 형식으로 표시.
            - **로딩 및 오류 상태 UI:** 로딩 스피너, 오류 메시지 및 재시도 버튼 표시.
- **차트 라이브러리:** `recharts` (기본 연동 완료)
- **주요 기능 요구사항:**
    - 기간별 매출 조회 (일간, 주간, 월간, 분기별, 연간) - (일간, 주간, 월간 기본 구현 완료)
    - (향후) 결제 수단별 매출 비중
    - (향후) 상품/서비스별 매출 분석
- **개발 전 고려사항 및 계획 (지속):**
    - **데이터 원천 및 주요 필드:**
        - **주요 데이터:** `Payment` 정보 (결제 내역)
            - `payments` 테이블 (또는 `getAllPayments()`를 통해 얻는 데이터 리스트) - **[TODO] 실제 데이터 연동 필요**
            - **핵심 필드:**
                - `amount` (결제 금액)
                - `paymentDate` (결제일) - 기간별 집계 기준
                - `status` (결제 상태) - **"완료" 상태인 결제만 매출로 집계** (구현 완료)
                - `membershipType` (이용권 이름) - 상품별 분석 시 활용
                - `memberName` (회원 이름)
        - **보조 데이터:**
            - `MembershipType` 정보 (이용권 상세): `payments`의 `membershipType`과 연결하여 이용권의 정가, 기간 등 상세 정보 참고 가능.
            - `Member` 정보 (회원 상세): `payments`의 `memberName` (또는 `memberId`가 있다면)을 통해 회원 정보 연동 가능 (예: 신규/기존 회원별 매출 분석 등 심화 분석 시).
    - **데이터 연동 및 처리:**
        - **매출 집계 로직:** (목업 데이터 기반으로 기본 구현 완료)
            - `Payment` 데이터 중 `status`가 "완료"인 건들만 필터링.
            - 선택된 기간(일간, 주간, 월간 등)에 따라 `paymentDate`를 기준으로 `amount`를 합산.
        - **API 명세 (백엔드 사용 시) 또는 프론트엔드 집계 로직:**
            - **요청:** 기간 (시작일, 종료일), 통계 단위 (일간, 주간, 월간 등)
            - **응답 (예시: 일간 매출):** `[{ date: 'YYYY-MM-DD', totalAmount: 150000, count: 3 }, ...]`
                - `date`: 해당 날짜
                - `totalAmount`: 해당 날짜의 총 매출액
                - `count`: 해당 날짜의 총 결제 건수 (완료 기준)
        - **목업 데이터 예시 (`Payment` 데이터 기반):** (Statistics.tsx 내에 정의됨)
            ```json
            [
              { "id": "1", "date": "2023-10-01", "amount": 150000, "status": "완료", "membershipType": "1개월 PT", "paymentMethod": "카드" },
              ...
            ]
            ```
        - **상태 관리 (`Statistics.tsx`):** (기본 상태 관리 구현 완료)
            - 선택된 기간 (예: `startDate`, `endDate`)
            - 선택된 통계 단위 (예: `viewType: 'daily' | 'weekly' | 'monthly'`)
            - 차트 표시용 데이터 (예: `chartData: [{ name: '2023-10-01', 매출: 250000, 건수: 2 }, ...]`)
            - 로딩 상태 (예: `isLoading: false`)
            - 오류 상태 (예: `error: null`)
    - **컴포넌트 구조 (`Statistics.tsx` 내부):** (단일 파일 내 기본 구현 완료)
        - `DateRangePicker`: 기간 선택 컴포넌트 (구현 완료)
        - `ViewTypeSelector`: 통계 단위 선택 (구현 완료)
        - `SalesChart`: 매출 차트 표시 (`recharts` 사용) (구현 완료)
        - `SummaryCards`: 주요 지표(총 매출, 평균 매출 등) 표시 카드 (구현 완료)
        - `DataTable`: 상세 데이터 테이블 (구현 완료)
        - **[TODO]** 가독성 및 유지보수성 향상을 위해 위 컴포넌트들을 별도 파일로 분리 고려.
    - **UI/UX:** (기본 UI 구현 완료, 추가 개선 가능)
        - 데이터 로딩 시 스켈레톤 UI 또는 로딩 스피너 표시 (구현 완료)
        - 데이터 없을 경우 "해당 기간에 매출 데이터가 없습니다." 메시지 표시 (구현 완료)
        - 오류 발생 시 사용자에게 알림 (예: "데이터를 불러오는 중 오류가 발생했습니다.") (구현 완료)
    - **데이터 일관성 및 오류 처리:**
        - `Payment` 데이터의 `status` 필드를 정확히 사용하여 "완료"된 결제만 매출로 집계하도록 보장 (구현 완료).
        - `paymentDate` 필드가 유효한 날짜 형식인지 확인 (데이터 입력 단계에서 유효성 검사 중요).
        - 데이터 집계 시점과 실제 DB 데이터 변경 시점 간의 차이 최소화 방안 고려 (실시간 반영이 어렵다면, 데이터 기준 시점 명시).
        - 특정 이용권이 삭제되거나 이름이 변경될 경우, 과거 결제 내역에 저장된 `membershipType` 이름과의 일관성 문제 발생 가능성 인지 (통계 조회 시점에서는 결제 당시의 정보로 보여주는 것이 일반적).
    - **테스트 케이스 (기본):**
        - 기간 변경 시 해당 기간 데이터로 차트 및 요약 정보 업데이트 확인 (목업 데이터 기반으로 확인 가능).
        - 통계 단위(일간/주간/월간) 변경 시 차트 X축 및 데이터 집계 방식 변경 확인 (목업 데이터 기반으로 확인 가능).
        - **"완료" 상태의 결제만 매출에 포함되는지 확인 (취소/환불 건 제외).** (목업 데이터 `status` 필터링으로 확인 가능)
        - **다양한 결제일자를 가진 목업 데이터로 기간별(일간,주간,월간) 집계가 정확한지 확인.** (목업 데이터 기반으로 확인 가능)
        - API 호출 실패 또는 데이터 없는 경우, 적절한 UI(오류 메시지, 데이터 없음 표시)가 나타나는지 확인 (현재 로딩/오류 UI 구현됨).
        - **[TODO]** 실제 데이터 연동 후 테스트 케이스 추가 실행 필요.

### 3단계: 추가 통계 기능 개발 (향후)
- 결제 수단별 매출 비중
- 상품/서비스별 매출 분석
- **[TODO]** 분기별, 연간 매출 조회 기능 추가
