# 피트니스 회원 관리 프로그램 리팩토링 필요사항

## 1. 컴포넌트 구조 문제 (StaffModal, PaymentModal, MemberModal 리팩토링 완료)
- Modal 컴포넌트들의 내부 UI 및 로직 분리 완료.
- 단일 책임 원칙(SRP) 개선됨.
- 비즈니스 로직과 UI 결합도 완화됨.
- 컴포넌트 재사용성 향상됨.

## 2. 의존성 관리
- 외부 라이브러리 의존도가 높음
  * 상태관리: zustand
  * 폼관리: react-hook-form
  * 차트: chart.js, react-chartjs-2
  * UI애니메이션: framer-motion
  * 데이터베이스: better-sqlite3
- 불필요한 API 모듈(src/api/index.ts) 및 axios 의존성 제거 완료

## 3. 타입 안정성
- TypeScript 사용 중이나 타입 정의가 미흡
- zod를 사용한 런타임 타입 검증은 있으나, 컴파일 타임 타입 체크 강화 필요
- 타입 정의의 일관성 부족
- 전역 타입 정의 (`src/types/index.ts`, `src/types/electron.d.ts`) 중앙화 및 일관성 개선 완료

## 4. 테스트 커버리지
- Jest, React Testing Library 설정되어 있으나 실제 테스트 코드 부족
  * 단위 테스트: 일부 유틸리티 함수 및 간단한 컴포넌트에 대해서만 존재
  * 컴포넌트 테스트: 주요 모달 및 일부 복잡한 컴포넌트에 대한 테스트 필요
  * 페이지 컴포넌트 테스트: 거의 없음 (Staff 페이지 테스트만 존재)
  * Dashboard 페이지 기본 테스트 코드 작성 완료 (렌더링, 데이터 로딩/실패, 빈 데이터 처리)
- 대형 컴포넌트 및 통합 테스트, E2E 테스트 부재
- 테스트 커버리지 측정 및 목표 설정 필요

## 5. 코드 구조
- 비즈니스 로직이 UI 컴포넌트에 과도하게 포함
- 서비스 레이어 분리 필요
- 커스텀 훅을 통한 로직 분리 필요
- 상태 관리 최적화 필요
- Electron IPC 통신 설정 및 핸들러 구현 완료 (설정, 재시작, 출석, 회원 검색)

## 6. 에러 처리
- 로깅 시스템 `electron-log`로 통일 완료
- 에러 처리 전략 수립 필요
- 사용자 피드백 개선 필요

## 7. 성능 최적화
- 대형 컴포넌트로 인한 리렌더링 성능 저하
- React.memo, useMemo, useCallback 등 최적화 기법 적용 필요
- 데이터 페칭 최적화 필요
- 메모리 사용량 최적화 필요

## 8. 보안
- SQLite 데이터베이스 보안 강화 필요
- 데이터 백업 전략 수립 필요
- 민감 정보(결제 정보 등) 처리 방식 검토 필요
- 접근 권한 관리 강화 필요

## 9. 코드 품질
- ESLint 설정 완료 및 일부 오류 수정 진행
- Prettier 설정 통일 완료 (.prettierrc.js 생성 및 포맷 적용)
- 코드 리뷰 프로세스 도입 필요
- 문서화 개선 필요

## 10. 유지보수성
- 코드 중복 제거 필요
- 네이밍 컨벤션 통일 필요
- 주석 및 문서화 개선 필요
- 버전 관리 전략 수립 필요
- 주요 TODO 주석 해결 완료 (설정 저장/로드, 앱 재시작, 출석 기록, 회원 검색)
