**테스트 코드 업데이트 요약 (2025-05-17)**

**1. `PaymentModal.test.tsx`**

*   **핵심 변경사항:**
    *   `PaymentForm` 컴포넌트 모킹을 해제하고 실제 컴포넌트를 사용하여 보다 통합적인 테스트가 가능하도록 변경했습니다.
*   **주요 테스트 케이스:**
    *   **UI 렌더링:**
        *   신규 결제 모달이 열렸을 때 제목, 버튼, 주요 폼 필드(회원 검색, 결제 금액, 회원권 종류, 결제일, 시작일, 종료일, 결제 수단, 메모)가 올바르게 표시되는지 확인했습니다.
    *   **데이터 표시 (수정/조회 모드):**
        *   기존 결제 정보(`mockExistingPayment`)가 제공되었을 때, 폼 필드에 해당 정보가 정확히 채워지는지 검증했습니다 (특히, 금액은 `formatCurrency`를 사용하여 포맷팅된 형태로 표시).
        *   조회 모드(`isViewMode={true}`)에서는 모든 입력 필드가 비활성화되고, 하위 컴포넌트들(`MemberSearchInput`, `AmountInput`, `MembershipTypeSelect`, `PaymentDatePicker`)이 조회 모드에 맞게 렌더링되는지 확인했습니다.
    *   **사용자 입력 및 저장 (신규 결제 Full Flow):**
        *   사용자가 신규 결제 정보를 입력하고 (회원권 종류 선택 시 종료일 자동 계산 로직 포함 - `calculateEndDate`), "저장" 버튼을 클릭했을 때 `onSave` 콜백이 올바른 데이터와 함께 호출되는지 전체 흐름을 테스트했습니다.
    *   **유효성 검사:**
        *   필수 필드(회원, 결제 금액, 회원권 종류, 결제일, 시작일)가 누락된 경우, `validatePaymentForm` 유틸리티 함수에 정의된 대로 에러 메시지가 정상적으로 표시되는지 확인했습니다.

**2. `MemberModal.test.tsx`**

*   **핵심 변경사항:**
    *   `common/Modal` 컴포넌트 모킹 대신 `react-dom`의 `createPortal`을 모킹하여 모달 자체의 동작을 더 실제에 가깝게 테스트하도록 개선했습니다.
    *   모달의 다양한 모드(신규 등록, 정보 수정, 정보 조회)에 대한 테스트 케이스를 포괄적으로 추가했습니다.
*   **주요 테스트 케이스:**
    *   **UI 렌더링 (신규 등록):**
        *   신규 회원 등록 모달이 열렸을 때 제목("신규 회원 등록"), 버튼("등록 완료", "취소"), 그리고 주요 폼 필드들(`MemberBasicInfoForm`, `MembershipInfoForm`, `MemberNotesForm`)이 올바르게 표시되는지 확인했습니다.
    *   **신규 회원 등록 (Full Flow):**
        *   사용자가 모든 필수 정보(이름, 전화번호, 성별, 생년월일, 회원권 정보 등)를 입력하고, "등록 완료" 버튼을 클릭했을 때 `onSave` 콜백이 호출되는지 검증했습니다.
        *   전화번호 입력 시 자동으로 하이픈(-)이 포맷팅되는 기능과 회원권 시작일 및 개월 수에 따라 종료일이 올바르게 계산되는 로직도 함께 테스트했습니다.
        *   `getAllStaff` API 호출을 모킹하여 강사 선택 기능도 검증했습니다.
    *   **유효성 검사:**
        *   필수 필드(이름) 누락, 잘못된 이메일 형식 입력 시 에러 메시지가 정상적으로 표시되는지 확인했습니다.
    *   **회원 정보 수정 모드:**
        *   기존 회원 정보(`mockExistingMember`)를 모달에 로드하고, 사용자가 정보를 수정한 후 "수정 완료" 버튼을 클릭했을 때 `onSave` 콜백이 수정된 데이터와 함께 호출되는지 검증했습니다. (이 과정에서 `Member` 타입 import 및 관련 린터 오류 수정)
    *   **회원 정보 조회 모드 및 수정 전환:**
        *   조회 모드(`isViewMode={true}`)로 모달이 열렸을 때, `MemberViewDetails` 컴포넌트를 통해 회원 정보가 올바르게 표시되고 입력 필드가 비활성화되는지 확인했습니다.
        *   "수정하기" 버튼 클릭 시 `onSwitchToEdit` 콜백이 호출되며 수정 모드로 정상적으로 전환되는지 (제목 변경, 입력 필드 활성화 등) 검증했습니다.

**3. `StaffModal.test.tsx`**

*   **핵심 변경사항:**
    *   `MemberModal.test.tsx`와 유사하게 `react-dom`의 `createPortal`을 모킹했습니다.
    *   신규 직원 등록, 정보 수정, 조회 및 권한 설정 관련 테스트를 중점적으로 추가하고 개선했습니다.
*   **주요 테스트 케이스 (첨부된 `StaffModal.test.tsx` 기반):**
    *   **UI 렌더링 (신규 등록):**
        *   신규 직원 등록 모달("새 직원 등록")이 열렸을 때 제목, 버튼("등록 완료", "취소"), `StaffForm`의 기본 정보 필드(이름, 직책, 전화번호, 이메일, 입사일, 상태, 메모) 및 `StaffPermissionsForm`의 권한 설정 영역(제목 "권한 설정", 개별 권한 체크박스, 권한 프리셋 버튼)이 모두 올바르게 표시되는지 확인했습니다. (`Staff` 타입 import)
    *   **신규 직원 등록 (Full Flow):**
        *   사용자가 직원의 기본 정보(이름, 직책, 입사일, 상태, 전화번호, 이메일, 메모)를 입력하고, '트레이너' 권한 프리셋 버튼을 클릭하여 권한을 설정한 후 "등록 완료" 버튼을 눌렀을 때, `onSave` 콜백이 올바른 데이터(입력된 정보 및 `expectedTrainerPermissions` 객체)와 함께 호출되는지 전체 과정을 테스트했습니다.
        *   전화번호 자동 포맷팅 기능과 권한 레이블 매핑을 통한 정확한 체크박스 선택 여부도 검증했습니다. (`StaffPosition`, `StaffStatus` enum import)
    *   **유효성 검사:**
        *   필수 필드(이름, 직책, 입사일) 누락 시 또는 잘못된 전화번호/이메일 형식 입력 시 각각에 맞는 에러 메시지가 표시되는지 확인했습니다.
    *   **직원 정보 수정 모드:**
        *   기존 직원 정보(`mockExistingStaff`)를 모달에 로드("직원 정보 수정" 제목 확인)하고, 폼에 데이터가 정확히 채워지는지(이름, 직책, 이메일, 권한 등) 확인했습니다.
        *   사용자가 전화번호, 메모, 특정 권한('직원 관리' 권한 체크)을 수정한 후 "수정 완료" 버튼을 클릭했을 때, `onSave` 콜백이 정확히 수정된 데이터와 함께 호출되는지 검증했습니다.
    *   **직원 정보 조회 모드 및 수정 모드 전환:**
        *   조회 모드(`isViewMode={true}`)로 모달이 열렸을 때("직원 정보 보기" 제목 확인), 주요 정보가 읽기 전용으로 표시되고 권한 체크박스가 비활성화되는지 확인했습니다.
        *   "수정하기" 버튼 클릭 시 수정 모드로 정상 전환되어 제목이 "직원 정보 수정"으로 변경되고, 입력 필드 및 권한 체크박스가 활성화되며 "수정 완료" 버튼이 표시되는지 검증했습니다. 