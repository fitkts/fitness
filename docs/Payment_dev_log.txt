## Payment.tsx 개발 로그 및 문서

**최종 업데이트 날짜:** {{YYYY-MM-DD}} (스크립트 실행 시점의 날짜로 자동 기입)

### 1. 개요

`Payment.tsx` 파일은 피트니스 센터 회원들의 결제 내역과 센터에서 제공하는 이용권 종류를 관리하는 페이지 컴포넌트입니다. 사용자는 이 페이지를 통해 새로운 결제를 등록하거나 기존 결제 내역을 수정/삭제할 수 있으며, 이용권의 상세 정보를 관리할 수 있습니다. 또한, 다양한 검색, 필터링, 정렬 기능을 통해 원하는 데이터를 쉽게 찾을 수 있도록 지원합니다.

### 2. 주요 기능 상세

#### 2.1. 결제 내역 관리
*   **조회**: 전체 결제 내역을 테이블 형태로 조회합니다. 회원명, 결제일, 이용권 정보, 결제 방법, 금액, 상태 등의 정보를 표시합니다.
*   **추가**: '새 결제 등록' 버튼을 통해 모달창에서 신규 결제 정보를 입력하고 저장합니다. 회원 선택, 이용권 선택, 결제일, 결제 금액, 결제 방법, 상태 등을 입력합니다.
*   **수정**: 기존 결제 내역을 선택하여 모달창에서 정보를 수정하고 저장합니다.
*   **삭제**: 특정 결제 내역을 삭제합니다. 삭제 전 사용자 확인 과정을 거칩니다.
*   **상세 보기**: 결제 내역 클릭 시 모달을 통해 상세 정보를 확인할 수 있습니다.

#### 2.2. 이용권 종류 관리
*   **조회**: 등록된 이용권 종류를 카드 형태로 조회합니다. 이용권 이름, 기간, 가격, 활성화 상태 등을 표시합니다.
*   **추가**: '새 이용권 추가' 버튼을 통해 모달창에서 신규 이용권 정보를 입력하고 저장합니다. 이용권 이름, 가격, 기간(개월), 설명, 최대 이용 횟수, 활성화 여부 등을 설정합니다.
*   **수정**: 기존 이용권 정보를 선택하여 모달창에서 수정하고 저장합니다.
*   **삭제**: 특정 이용권 정보를 삭제합니다. 삭제 전 사용자 확인 과정을 거칩니다.
*   **상세 보기**: 이용권 카드에서 상세 보기 버튼을 통해 모달에서 상세 정보를 확인할 수 있습니다.

#### 2.3. 검색 및 필터링 기능
*   **결제 내역 검색**: 회원명, 이용권 이름, 영수증 번호로 결제 내역을 검색할 수 있습니다.
*   **결제 내역 필터**:
    *   **기간 필터**: 전체 기간, 오늘, 이번 주, 이번 달 기준으로 결제 내역을 필터링합니다.
    *   **상태 필터**: 전체, 완료, 취소, 환불 상태로 결제 내역을 필터링합니다.
*   **이용권 검색**: 이용권 이름 또는 설명으로 이용권 목록을 검색할 수 있습니다.

#### 2.4. 정렬 기능
*   결제 내역 테이블의 각 컬럼(회원명, 결제일, 이용권, 결제 방법, 금액, 상태) 헤더를 클릭하여 오름차순/내림차순/기본 정렬을 수행할 수 있습니다.

#### 2.5. 페이지네이션
*   결제 내역이 많을 경우, 페이지네이션을 통해 나누어 보여줍니다.
*   페이지당 표시할 항목 수를 (10, 20, 30, 50개) 선택할 수 있습니다.
*   '전체 보기' 옵션을 제공하여 모든 결제 내역을 한 페이지에서 볼 수 있습니다.

#### 2.6. 통계 정보 표시
*   결제 내역 탭 상단에 주요 통계 정보를 카드 형태로 요약하여 보여줍니다.
    *   총 결제액 (완료 건 기준)
    *   이번 달 결제액 (완료 건 기준) 및 전체 대비 비율
    *   지난 달 결제액 (완료 건 기준) 및 전체 대비 비율
    *   결제 건수 요약 (총 건수, 완료 건수, 취소 건수, 환불 건수)

#### 2.7. 데이터 가져오기/내보내기
*   **Excel 내보내기**: 현재 필터링 및 정렬된 결제 내역을 Excel 파일 (`결제내역.xlsx`)로 내보낼 수 있습니다.

#### 2.8. 모달을 통한 사용자 인터랙션
*   결제 정보 추가/수정/상세보기, 이용권 정보 추가/수정/상세보기 시 `PaymentModal` 및 `MembershipTypeModal` 컴포넌트를 사용합니다.
*   모달 내에서 회원 선택, 이용권 선택 등의 드롭다운 메뉴를 제공합니다.
*   보기 모드(View Mode)와 편집 모드를 구분하여 사용성을 높였습니다.

### 3. 구현 기술 및 상태 관리

*   **UI 프레임워크**: React (v17+)
*   **언어**: TypeScript
*   **스타일링**: Tailwind CSS
*   **아이콘**: `lucide-react`
*   **데이터 통신**: `../database/ipcService.ts` 에 정의된 함수들을 통해 Electron의 메인 프로세스와 IPC 통신을 수행하여 데이터베이스 작업을 처리합니다. (예: `getAllPayments`, `addPayment` 등)
*   **상태 관리**:
    *   `useState`: 컴포넌트의 지역 상태(결제 목록, 이용권 목록, 로딩 상태, 모달 상태, 검색어, 필터 값, 정렬 설정, 페이지네이션 설정 등)를 관리합니다.
    *   `useEffect`: 데이터 로딩, 특정 상태 변경에 따른 부수 효과 처리(예: 필터 변경 시 데이터 재조회)에 사용됩니다.
    *   `useCallback`: 함수 재생성을 방지하여 성능 최적화에 기여합니다. (주로 `loadData` 등)
    *   `useMemo`: 계산 비용이 큰 데이터(정렬된 목록, 필터링된 목록, 통계 데이터)를 메모이제이션하여 성능을 최적화합니다.
*   **토스트 알림**: `useToast` 커스텀 훅을 사용하여 사용자 작업 결과(성공, 실패, 정보)를 화면에 알림으로 표시합니다.
*   **Excel 처리**: `xlsx` 라이브러리를 사용하여 Excel 파일 생성 및 내보내기 기능을 구현했습니다.

### 4. 외부 연동

#### 4.1. 데이터베이스 연동
*   `src/database/ipcService.ts` 파일을 통해 백엔드(Electron 메인 프로세스로 추정)와 통신하여 데이터베이스 CRUD 작업을 수행합니다.
    *   `getAllPayments`, `addPayment`, `updatePayment`, `deletePayment`
    *   `getAllMembershipTypes`, `addMembershipType`, `updateMembershipType`, `deleteMembershipType`
    *   `getAllMembers` (결제 모달에서 회원 선택 옵션을 위해 사용)

#### 4.2. 다른 페이지 컴포넌트와의 연관성 (추론 기반)

*   **`Members.tsx` (회원 관리 페이지)**:
    *   **데이터 참조**: `PaymentModal`에서 회원을 선택할 때 `getAllMembers`를 통해 회원 목록을 가져와 사용합니다. 결제 내역에는 `memberName` 필드가 포함되어 있어 회원 정보와 연결됩니다.
    *   **잠재적 상호작용**: 회원이 삭제되거나 정보가 변경될 경우, `Payment.tsx`에 해당 변경 사항이 반영되어야 할 수 있습니다. 현재는 `loadData`를 통해 전체 데이터를 다시 로드하는 방식으로 간접적인 업데이트가 이루어질 수 있습니다.

*   **`Dashboard.tsx` (대시보드 페이지)**:
    *   **데이터 제공**: `Payment.tsx`에서 계산되는 통계 정보(총 매출, 월별 매출 등)는 `Dashboard.tsx`의 주요 지표로 활용될 수 있습니다. `getDashboardStats`와 같은 함수를 통해 결제 데이터를 집계하여 대시보드에 필요한 정보를 제공할 가능성이 높습니다.
    *   `Payment.tsx`의 `statistics` 객체와 유사한 정보를 `Dashboard.tsx`가 필요로 할 것입니다.

*   **`Lockers.tsx` (락커 관리 페이지)**:
    *   **잠재적 연동**: 회원이 특정 이용권을 결제할 때, 해당 이용권에 락커 사용 권한이 포함되어 있다면 `Lockers.tsx`의 락커 할당 정보와 연동될 수 있습니다. 예를 들어, 특정 기간 이용권 결제 시 자동으로 락커를 배정하거나, 락커 사용료를 결제 내역에 포함시키는 시나리오를 생각해 볼 수 있습니다. 현재 코드에서는 직접적인 연동 로직은 보이지 않습니다.

*   **`Staff.tsx` (직원 관리 페이지)**:
    *   **잠재적 연동**: 결제 기록에 담당 직원 정보를 추가하여 어떤 직원이 해당 결제를 처리했는지 추적할 수 있습니다. `Payment` 타입에 `staffId` 또는 `staffName` 같은 필드를 추가하고, `Staff.tsx`의 직원 정보를 참조하여 구현할 수 있습니다. 현재 코드에서는 직접적인 연동은 없습니다.

*   **`Statistics.tsx` (통계 페이지)**:
    *   **데이터 제공**: `Payment.tsx`에서 관리하는 모든 결제 데이터는 `Statistics.tsx`에서 다양한 기준으로 분석될 핵심 데이터 소스입니다. `Statistics.tsx`는 결제 데이터를 기반으로 일별, 주별, 월별 매출 추이, 결제 방법별 통계, 이용권별 판매 통계 등 더 심층적인 분석을 제공할 수 있습니다. `getAllPayments`를 통해 전체 결제 데이터를 가져와 가공할 것으로 예상됩니다.

### 5. 개선 제안 사항

#### 5.1. 코드 구조 개선
*   **컴포넌트 분리**: `Payment.tsx` 파일이 매우 큽니다 (약 1300줄). 가독성 및 유지보수성 향상을 위해 다음과 같은 부분들을 별도의 컴포넌트로 분리하는 것을 고려할 수 있습니다:
    *   결제 내역 테이블 (`PaymentTable.tsx`)
    *   이용권 목록 (`MembershipTypeList.tsx`)
    *   검색 및 필터 UI (`PaymentFilter.tsx`, `MembershipTypeFilter.tsx`)
    *   통계 표시 영역 (`StatisticsSummary.tsx`)
    *   페이지네이션 로직 (`Pagination.tsx`은 이미 분리되어 있지만, 사용 방식 개선 여지 확인)
*   **커스텀 훅 활용**: 반복되는 로직(예: 정렬, 필터링, 페이지네이션 관련 상태 및 핸들러)을 커스텀 훅으로 추출하여 재사용성을 높이고 컴포넌트 코드를 간결하게 만들 수 있습니다. (예: `useSort`, `usePagination`, `useFilter`)
*   **상수 및 설정 분리**: 페이지 크기 옵션, 기본 정렬값, 필터 기본값 등을 별도의 상수 파일로 분리하여 관리 용이성을 높입니다.

#### 5.2. 성능 최적화
*   **데이터 로딩 최적화**: `loadData` 함수가 호출될 때마다 모든 데이터를 새로 가져오고 있습니다. 부분 업데이트나 캐싱 전략을 도입하여 불필요한 데이터 요청을 줄일 수 있습니다. (예: `react-query`, `SWR` 사용 고려 또는 자체 캐시 구현)
*   **Memoization**: `useMemo`와 `useCallback`이 이미 사용되고 있지만, 더 적극적으로 활용하여 불필요한 리렌더링을 최소화할 수 있는 부분을 찾아볼 수 있습니다. `React.memo`를 사용한 컴포넌트 메모이제이션도 고려합니다.
*   **가상 스크롤링 (Virtual Scrolling)**: 결제 내역이나 이용권 목록이 매우 많아질 경우, 테이블/리스트 렌더링 성능 저하를 막기 위해 `react-window`나 `react-virtualized` 같은 라이브러리 사용을 고려할 수 있습니다.

#### 5.3. 테스트 코드 작성
*   **단위 테스트**: 주요 함수들(정렬 로직, 필터링 로직, 날짜/통화 포맷팅 함수, 상태 업데이트 로직 등)에 대한 단위 테스트를 작성하여 코드의 안정성을 높입니다. (Jest, React Testing Library 사용)
*   **통합 테스트**: 모달 동작, 데이터 CRUD 과정 등 여러 컴포넌트 및 서비스가 상호작용하는 주요 기능에 대한 통합 테스트를 작성합니다.
*   **E2E 테스트**: 실제 사용자의 흐름을 시뮬레이션하는 E2E 테스트(Cypress, Playwright 등) 도입을 장기적으로 고려할 수 있습니다.

#### 5.4. UI/UX 개선
*   **필터 UI 개선**: 현재 필터 옵션이 버튼 클릭 시 나타나고 사라지는 방식입니다. 더 직관적인 UI(예: 항상 보이는 필터 패널, 다중 선택 필터 등)를 고려할 수 있습니다.
*   **로딩 상태 표시**: 데이터 로딩 중임을 명확히 알리는 스켈레톤 UI나 세분화된 로딩 인디케이터를 적용하여 사용자 경험을 향상시킬 수 있습니다.
*   **테이블 반응형 디자인 개선**: 모바일 환경이나 작은 화면에서도 테이블 내용이 잘 보이도록 반응형 디자인을 강화합니다. (예: 카드 형태로 변경, 중요 컬럼만 표시 등)
*   **일괄 작업 기능**: 여러 결제 내역을 선택하여 일괄적으로 상태를 변경하거나 삭제하는 기능을 추가하면 사용 편의성이 증대될 수 있습니다.

#### 5.5. 에러 처리 및 사용자 피드백 강화
*   **상세한 에러 메시지**: `ipcService` 호출 실패 시 더 구체적인 에러 메시지를 사용자에게 보여주고, 가능한 경우 해결 방법을 안내합니다.
*   **오프라인 지원 및 재시도 로직**: 네트워크 오류 발생 시 임시 저장 기능이나 자동 재시도 로직을 추가하여 데이터 유실을 방지하고 안정성을 높일 수 있습니다.
*   **입력 유효성 검사 강화**: 모달에서 데이터 입력 시 프론트엔드 및 백엔드 양쪽에서 더욱 철저한 유효성 검사를 수행하여 잘못된 데이터 입력을 방지합니다.

#### 5.6. 상태 관리 라이브러리 도입 고려
*   애플리케이션 규모가 더 커지거나 여러 컴포넌트 간 상태 공유가 복잡해질 경우, Zustand, Redux Toolkit, Recoil 등의 상태 관리 라이브러리 도입을 고려하여 상태 관리의 복잡성을 줄이고 예측 가능성을 높일 수 있습니다. (현재 `Members.tsx`에서 Zustand를 사용하는 것으로 보이므로, 일관성을 위해 다른 페이지에도 확대 적용 고려)

#### 5.7. 타입 정의 강화
*   `any` 타입 사용 최소화: `setDateFilter(e.target.value as any)` 와 같은 부분에서 더 정확한 타입을 사용하여 타입 안정성을 높입니다.
*   서버 응답 타입 정의: `ipcService`를 통해 받는 데이터의 타입을 명확히 정의하여 데이터 처리 과정에서의 오류를 줄입니다.

### 6. 결론

`Payment.tsx`는 결제 및 이용권 관리를 위한 핵심 기능을 대부분 갖추고 있으며, `useMemo`, `useCallback` 등을 활용한 기본적인 성능 최적화도 이루어져 있습니다. 데이터 연동은 `ipcService`를 통해 이루어지며, 다른 주요 페이지들과의 데이터 연관성도 존재합니다.

향후 코드 분리, 테스트 코드 작성, UI/UX 개선, 보다 견고한 에러 처리 등을 통해 더욱 안정적이고 유지보수하기 쉬운 컴포넌트로 발전시킬 수 있을 것입니다. 특히 컴포넌트 분리와 상태 관리 전략 개선은 장기적인 관점에서 중요도가 높습니다.

---
*이 문서는 자동으로 생성되었으며, 실제 개발 상황과 일부 차이가 있을 수 있습니다.* 