// ÏÉÅÎã¥ÏùºÏßÄ ÏãúÏä§ÌÖú Ìè¨Îß∑ÌåÖ Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§

/**
 * Unix timestampÎ•º ÎÇ†Ïßú Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
 */
export const formatDate = (timestamp?: number): string => {
  if (!timestamp) return '-';
  
  try {
    // timestampÍ∞Ä Ï¥à Îã®ÏúÑÏù∏ÏßÄ Î∞ÄÎ¶¨Ï¥à Îã®ÏúÑÏù∏ÏßÄ ÌôïÏù∏
    const date = timestamp > 9999999999 
      ? new Date(timestamp) 
      : new Date(timestamp * 1000);
    
    if (isNaN(date.getTime())) return '-';
    
    return date.toISOString().split('T')[0];
  } catch {
    return '-';
  }
};

/**
 * ÏÉÅÎåÄÏ†Å ÏãúÍ∞Ñ ÌëúÏãú (Ïòà: "3Ïùº Ï†Ñ", "1Ï£ºÏùº Ï†Ñ")
 */
export const formatRelativeTime = (timestamp?: number): string => {
  if (!timestamp) return '-';
  
  try {
    const date = timestamp > 9999999999 
      ? new Date(timestamp) 
      : new Date(timestamp * 1000);
    
    if (isNaN(date.getTime())) return '-';
    
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) {
      return 'Ïò§Îäò';
    } else if (diffDays === 1) {
      return 'Ïñ¥Ï†ú';
    } else if (diffDays < 7) {
      return `${diffDays}Ïùº Ï†Ñ`;
    } else if (diffDays < 30) {
      const weeks = Math.floor(diffDays / 7);
      return `${weeks}Ï£ºÏùº Ï†Ñ`;
    } else if (diffDays < 365) {
      const months = Math.floor(diffDays / 30);
      return `${months}Í∞úÏõî Ï†Ñ`;
    } else {
      const years = Math.floor(diffDays / 365);
      return `${years}ÎÖÑ Ï†Ñ`;
    }
  } catch {
    return '-';
  }
};

/**
 * Ï†ÑÌôîÎ≤àÌò∏ Ìè¨Îß∑ÌåÖ (ÌëúÏãúÏö©)
 */
export const formatPhoneNumber = (phone?: string): string => {
  if (!phone) return '-';
  
  const numbers = phone.replace(/\D/g, '');
  if (numbers.length === 11) {
    return `${numbers.slice(0, 3)}-${numbers.slice(3, 7)}-${numbers.slice(7)}`;
  }
  return phone;
};

/**
 * ÎÇòÏù¥ Í≥ÑÏÇ∞
 */
export const calculateAge = (birthTimestamp?: number): string => {
  if (!birthTimestamp) return '-';
  
  try {
    const birthDate = birthTimestamp > 9999999999 
      ? new Date(birthTimestamp) 
      : new Date(birthTimestamp * 1000);
    
    if (isNaN(birthDate.getTime())) return '-';
    
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    
    return `${age}ÏÑ∏`;
  } catch {
    return '-';
  }
};

/**
 * Ïö¥Îèô ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ (Î∂Ñ -> ÏãúÍ∞Ñ:Î∂Ñ)
 */
export const formatDuration = (minutes?: number): string => {
  if (typeof minutes !== 'number' || minutes <= 0) return '-';
  
  if (minutes < 60) {
    return `${minutes}Î∂Ñ`;
  }
  
  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;
  
  if (remainingMinutes === 0) {
    return `${hours}ÏãúÍ∞Ñ`;
  }
  
  return `${hours}ÏãúÍ∞Ñ ${remainingMinutes}Î∂Ñ`;
};

/**
 * ÏöîÏùº Î∞∞Ïó¥ÏùÑ Î¨∏ÏûêÏó¥Î°ú Ìè¨Îß∑ÌåÖ
 */
export const formatDaysOfWeek = (days?: number[]): string => {
  if (!days || days.length === 0) return '-';
  
  const dayNames = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];
  return days.map(day => dayNames[day]).join(', ');
};

/**
 * Ïö¥Îèô Í∞ïÎèÑ Î†àÎ≤®ÏùÑ ÌÖçÏä§Ìä∏Î°ú Ìè¨Îß∑ÌåÖ
 */
export const formatIntensityLevel = (level: number): string => {
  const levels = {
    1: 'Îß§Ïö∞ Ïâ¨ÏõÄ',
    2: 'Ïâ¨ÏõÄ', 
    3: 'Î≥¥ÌÜµ',
    4: 'Ïñ¥Î†§ÏõÄ',
    5: 'Îß§Ïö∞ Ïñ¥Î†§ÏõÄ'
  };
  
  return levels[level as keyof typeof levels] || '-';
};

/**
 * ÏÉÅÎã¥ ÏÉÅÌÉúÎ•º ÌïúÍ∏ÄÎ°ú Ìè¨Îß∑ÌåÖ
 */
export const formatConsultationStatus = (status?: string): string => {
  const statusMap: Record<string, string> = {
    'pending': 'ÎåÄÍ∏∞ Ï§ë',
    'in_progress': 'ÏßÑÌñâ Ï§ë',
    'completed': 'ÏôÑÎ£å',
    'follow_up': 'Ï∂îÍ∞Ä ÏÉÅÎã¥ ÌïÑÏöî'
  };
  
  return statusMap[status || ''] || status || '-';
};

/**
 * PT ÏÑ∏ÏÖò ÏÉÅÌÉúÎ•º ÌïúÍ∏ÄÎ°ú Ìè¨Îß∑ÌåÖ
 */
export const formatPTStatus = (status: string): string => {
  const statusMap = {
    'scheduled': 'ÏòàÏïΩÎê®',
    'completed': 'ÏôÑÎ£å',
    'cancelled': 'Ï∑®ÏÜåÎê®',
    'no_show': 'ÎÖ∏Ïáº'
  };
  
  return statusMap[status as keyof typeof statusMap] || status;
};

/**
 * Ïö¥Îèô ÌÉÄÏûÖÏùÑ ÌïúÍ∏ÄÎ°ú Ìè¨Îß∑ÌåÖ
 */
export const formatWorkoutType = (type: string): string => {
  const typeMap = {
    'cardio': 'Ïú†ÏÇ∞ÏÜå',
    'strength': 'Í∑ºÎ†• Ïö¥Îèô',
    'flexibility': 'Ïú†Ïó∞ÏÑ±',
    'mixed': 'Î≥µÌï© Ïö¥Îèô'
  };
  
  return typeMap[type as keyof typeof typeMap] || type;
};

/**
 * Î™©Ìëú Î∞∞Ïó¥ÏùÑ Î¨∏ÏûêÏó¥Î°ú Ìè¨Îß∑ÌåÖ
 */
export const formatGoals = (goals?: string[]): string => {
  if (!goals || goals.length === 0) return '-';
  
  if (goals.length <= 2) {
    return goals.join(', ');
  }
  
  return `${goals.slice(0, 2).join(', ')} Ïô∏ ${goals.length - 2}Í∞ú`;
};

/**
 * Ï≤¥Ï§ëÏùÑ Ìè¨Îß∑ÌåÖ
 */
export const formatWeight = (weight?: number): string => {
  if (!weight) return '-';
  return `${weight}kg`;
};

/**
 * ÏπºÎ°úÎ¶¨Î•º Ìè¨Îß∑ÌåÖ
 */
export const formatCalories = (calories?: number): string => {
  if (!calories) return '-';
  return `${calories.toLocaleString()}kcal`;
};

/**
 * ÏòÅÏñëÏÜåÎ•º Ìè¨Îß∑ÌåÖ (Îã®Î∞±Ïßà, ÌÉÑÏàòÌôîÎ¨º, ÏßÄÎ∞©)
 */
export const formatNutrient = (amount?: number, unit: 'g' | 'mg' = 'g'): string => {
  if (!amount) return '-';
  return `${amount}${unit}`;
};

/**
 * ÌçºÏÑºÌä∏Î•º Ìè¨Îß∑ÌåÖ
 */
export const formatPercentage = (value: number, decimals: number = 1): string => {
  return `${value.toFixed(decimals)}%`;
};

/**
 * ÌöåÏõêÍ∂å ÎßåÎ£åÏùºÍπåÏßÄ ÎÇ®ÏùÄ ÏùºÏàò Í≥ÑÏÇ∞
 */
export const formatMembershipRemaining = (endTimestamp?: number): string => {
  if (!endTimestamp) return '-';
  
  const endDate = new Date(endTimestamp * 1000);
  const today = new Date();
  const diffTime = endDate.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays < 0) {
    return `${Math.abs(diffDays)}Ïùº ÏßÄÎÇ®`;
  } else if (diffDays === 0) {
    return 'Ïò§Îäò ÎßåÎ£å';
  } else if (diffDays <= 7) {
    return `${diffDays}Ïùº ÎÇ®Ïùå`;
  } else if (diffDays <= 30) {
    const weeks = Math.floor(diffDays / 7);
    const remainingDays = diffDays % 7;
    if (remainingDays === 0) {
      return `${weeks}Ï£º ÎÇ®Ïùå`;
    }
    return `${weeks}Ï£º ${remainingDays}Ïùº ÎÇ®Ïùå`;
  } else {
    const months = Math.floor(diffDays / 30);
    return `ÏïΩ ${months}Í∞úÏõî ÎÇ®Ïùå`;
  }
};

/**
 * ÌååÏùº ÌÅ¨Í∏∞Î•º Ìè¨Îß∑ÌåÖ
 */
export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

/**
 * ÏãúÍ∞ÑÎåÄÎ•º 12ÏãúÍ∞Ñ ÌòïÏãùÏúºÎ°ú Ìè¨Îß∑ÌåÖ
 */
export const formatTimeSlot = (time: string): string => {
  if (!time) return '-';
  
  const [hours, minutes] = time.split(':').map(Number);
  const period = hours >= 12 ? 'Ïò§ÌõÑ' : 'Ïò§Ï†Ñ';
  const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;
  
  return `${period} ${displayHours}:${minutes.toString().padStart(2, '0')}`;
};

/**
 * ÏßÑÌñâÎ•†ÏùÑ ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú Ìè¨Îß∑ÌåÖ
 */
export const formatProgress = (current: number, total: number): { percentage: number; text: string } => {
  if (total === 0) return { percentage: 0, text: '0/0' };
  
  const percentage = Math.round((current / total) * 100);
  return {
    percentage,
    text: `${current}/${total} (${percentage}%)`
  };
};

/**
 * ÎßàÏßÄÎßâ Î∞©Î¨∏Ïùº Ìè¨Îß∑ÌåÖ (ÌäπÎ≥ÑÌïú Ïä§ÌÉÄÏùºÎßÅ)
 */
export const formatLastVisit = (timestamp?: number): { text: string; status: 'recent' | 'warning' | 'danger' } => {
  if (!timestamp) {
    return { text: 'Î∞©Î¨∏ Í∏∞Î°ù ÏóÜÏùå', status: 'danger' };
  }
  
  const now = Date.now();
  const diffDays = Math.floor((now - timestamp * 1000) / (1000 * 60 * 60 * 24));
  
  const text = formatRelativeTime(timestamp);
  
  if (diffDays <= 7) {
    return { text, status: 'recent' };
  } else if (diffDays <= 30) {
    return { text, status: 'warning' };
  } else {
    return { text, status: 'danger' };
  }
};

// ÏÉÅÎã¥ Í¥ÄÎ†® Ìè¨Îß∑ÌåÖ Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§

// Ïö¥Îèô Î™©Ìëú Î∞∞Ïó¥ÏùÑ Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
export const formatFitnessGoals = (goals?: string[] | string): string => {
  if (!goals) return '-';
  
  if (Array.isArray(goals)) {
    return goals.length > 0 ? goals.join(', ') : '-';
  }
  
  if (typeof goals === 'string') {
    try {
      const parsed = JSON.parse(goals);
      return Array.isArray(parsed) ? parsed.join(', ') : goals;
    } catch {
      return goals;
    }
  }
  
  return '-';
};

// ÏÑ±Î≥ÑÏùÑ ÏïÑÏù¥ÏΩòÍ≥º Ìï®Íªò ÌëúÏãú
export const formatGender = (gender?: string): string => {
  if (gender === 'ÎÇ®') return 'üë® ÎÇ®ÏÑ±';
  if (gender === 'Ïó¨') return 'üë© Ïó¨ÏÑ±';
  return '-';
};

// ÌöåÏõêÍ∂å Í∏∞Í∞Ñ Ìè¨Îß∑ÌåÖ
export const formatMembershipPeriod = (startTimestamp?: number, endTimestamp?: number): string => {
  if (!startTimestamp || !endTimestamp) return '-';
  
  const startDate = formatDate(startTimestamp);
  const endDate = formatDate(endTimestamp);
  
  if (startDate === '-' || endDate === '-') return '-';
  
  return `${startDate} ~ ${endDate}`;
};

// Í∏àÏï° Ìè¨Îß∑ÌåÖ (Ï≤ú Îã®ÏúÑ ÏΩ§Îßà)
export const formatCurrency = (amount?: number): string => {
  if (typeof amount !== 'number') return '-';
  return `${amount.toLocaleString()}Ïõê`;
};

// ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ (HH:MM)
export const formatTime = (timestamp?: number): string => {
  if (!timestamp || timestamp === 0) return '-';
  
  try {
    const date = timestamp > 1000000000000 ? new Date(timestamp) : new Date(timestamp * 1000);
    if (isNaN(date.getTime())) return '-';
    
    return date.toLocaleTimeString('ko-KR', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: false 
    });
  } catch {
    return '-';
  }
};

// ÎÇ†ÏßúÏôÄ ÏãúÍ∞Ñ Ìï®Íªò Ìè¨Îß∑ÌåÖ
export const formatDateTime = (timestamp?: number): string => {
  if (!timestamp || timestamp === 0) return '-';
  
  try {
    const date = timestamp > 1000000000000 ? new Date(timestamp) : new Date(timestamp * 1000);
    if (isNaN(date.getTime())) return '-';
    
    return date.toLocaleString('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    });
  } catch {
    return '-';
  }
};

// Ïö¥Îèô Í∞ïÎèÑÎ•º Ïù¥Î™®ÏßÄÏôÄ Ìï®Íªò ÌëúÏãú
export const formatIntensity = (level?: number): string => {
  const intensityMap: Record<number, string> = {
    1: 'üòå Îß§Ïö∞ Ïâ¨ÏõÄ',
    2: 'üôÇ Ïâ¨ÏõÄ',
    3: 'üòê Î≥¥ÌÜµ',
    4: 'üòÖ Ïñ¥Î†§ÏõÄ',
    5: 'üò∞ Îß§Ïö∞ Ïñ¥Î†§ÏõÄ'
  };
  
  return intensityMap[level || 0] || '-';
};

// ÌÖçÏä§Ìä∏ Í∏∏Ïù¥ Ï†úÌïú (ÎßêÏ§ÑÏûÑÌëú Ï∂îÍ∞Ä)
export const truncateText = (text?: string, maxLength: number = 50): string => {
  if (!text) return '-';
  
  if (text.length <= maxLength) return text;
  
  return `${text.slice(0, maxLength)}...`;
};

// Îπà Í∞í Ï≤¥ÌÅ¨ ÌõÑ Í∏∞Î≥∏Í∞í Î∞òÌôò
export const formatWithDefault = (value?: string | number, defaultValue: string = '-'): string => {
  if (value === null || value === undefined || value === '') return defaultValue;
  return String(value);
};

// ÌöåÏõê Í∞ÄÏûÖ Í≤ΩÍ≥º ÏùºÏàò
export const formatDaysSinceJoin = (joinTimestamp?: number): string => {
  if (!joinTimestamp) return '-';
  
  try {
    const joinDate = joinTimestamp > 9999999999 
      ? new Date(joinTimestamp) 
      : new Date(joinTimestamp * 1000);
    
    if (isNaN(joinDate.getTime())) return '-';
    
    const today = new Date();
    const diffMs = today.getTime() - joinDate.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) {
      return 'Ïò§Îäò Í∞ÄÏûÖ';
    } else if (diffDays === 1) {
      return 'Ïñ¥Ï†ú Í∞ÄÏûÖ';
    } else {
      return `Í∞ÄÏûÖ ${diffDays}ÏùºÏ∞®`;
    }
  } catch {
    return '-';
  }
}; 